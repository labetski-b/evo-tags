import { PrismaClient } from '@prisma/client';

const testUsers = [
  {
    telegramId: BigInt(999999001),
    username: 'testuser1',
    firstName: '–ê–Ω–Ω–∞',
    lastName: '–ò–≤–∞–Ω–æ–≤–∞',
    photoUrl: 'https://images.unsplash.com/photo-1494790108755-2616b812c1b9?w=150&h=150&fit=crop&crop=face'
  },
  {
    telegramId: BigInt(999999002), 
    username: 'testuser2',
    firstName: '–ú–∏—Ö–∞–∏–ª',
    lastName: '–ü–µ—Ç—Ä–æ–≤',
    photoUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'
  },
  {
    telegramId: BigInt(999999003),
    username: 'testuser3', 
    firstName: '–ï–ª–µ–Ω–∞',
    lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
    photoUrl: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face'
  },
  {
    telegramId: BigInt(999999004),
    username: 'testuser4',
    firstName: '–ê–ª–µ–∫—Å–µ–π',
    lastName: '–ö–æ–∑–ª–æ–≤',
    photoUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'
  }
];

const testReviews = [
  {
    authorIndex: 0,
    targetIndex: 1,
    talentsAnswer: '–û—Ç–ª–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –°–∏–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ SQL –∏ Python. –í—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.',
    clientAnswer: '–§–∏–Ω—Ç–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø –∏–ª–∏ –±–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.'
  },
  {
    authorIndex: 1,
    targetIndex: 0,
    talentsAnswer: '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä —Å –æ—Ç–ª–∏—á–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º —Å—Ç–∏–ª—è. –£–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.',
    clientAnswer: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è e-commerce –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ –≤–∞–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.'
  },
  {
    authorIndex: 2,
    targetIndex: 3,
    talentsAnswer: '–û–ø—ã—Ç–Ω—ã–π backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∑–Ω–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –û—Ç–ª–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ Node.js –∏ Docker. –û—á–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π.',
    clientAnswer: '–í—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≥–¥–µ –≤–∞–∂–Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.'
  }
];

export async function seedTestData(providedPrisma?: PrismaClient) {
  const prisma = providedPrisma || new PrismaClient();
  
  try {
    console.log('üå± Adding test users...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers = [];
    for (const user of testUsers) {
      const createdUser = await prisma.user.upsert({
        where: { telegramId: user.telegramId },
        create: user,
        update: user
      });
      createdUsers.push(createdUser);
      console.log(`‚úÖ Created user: ${user.firstName} ${user.lastName}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
    console.log('üìù Adding test reviews...');
    for (const review of testReviews) {
      await prisma.review.upsert({
        where: {
          authorId_targetId: {
            authorId: createdUsers[review.authorIndex].id,
            targetId: createdUsers[review.targetIndex].id
          }
        },
        create: {
          authorId: createdUsers[review.authorIndex].id,
          targetId: createdUsers[review.targetIndex].id,
          talentsAnswer: review.talentsAnswer,
          clientAnswer: review.clientAnswer
        },
        update: {
          talentsAnswer: review.talentsAnswer,
          clientAnswer: review.clientAnswer
        }
      });
      
      console.log(`‚úÖ Created review from ${testUsers[review.authorIndex].firstName} to ${testUsers[review.targetIndex].firstName}`);
    }
    
    console.log('üéâ Test data seeded successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding test data:', error);
    throw error;
  } finally {
    if (!providedPrisma) {
      await prisma.$disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedTestData();
}